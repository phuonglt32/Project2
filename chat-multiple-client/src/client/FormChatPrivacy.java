/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package client;

import com.google.gson.Gson;
import java.awt.Color;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.event.KeyEvent;
import java.io.PrintWriter;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JColorChooser;
import javax.swing.JFrame;
import javax.swing.JTextPane;
import javax.swing.text.AttributeSet;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import javax.swing.text.StyledDocument;
import request.Request;

/**
 *
 * @author Tran Cuong
 */
public class FormChatPrivacy extends javax.swing.JFrame {

    /**
     * Creates new form FormChatPrivacy
     */
    
    private String user = null;
    private String friend = null;
    private String history = "";
    private PrintWriter printWriter = null;
    private String rootMsg = "";
    private boolean firstString = true;
    private int pos = 0;
    private Gson gson = new Gson();
    public Color fontColor = Color.BLACK;
    JFrame parent;
    
    public FormChatPrivacy(String user, String friend, PrintWriter printWriter) {
        this.user = user;
        this.friend = friend;
        this.printWriter = printWriter;
        
        initComponents();
        
        jtbtnBold.setText("B");
        DefaultComboBoxModel fontModel=new DefaultComboBoxModel();
        DefaultComboBoxModel fontSizeModel=new DefaultComboBoxModel();
        fontSizeModel.addElement("14");
        fontSizeModel.addElement("16");
        fontSizeModel.addElement("18");
        fontSizeModel.addElement("20");
        cboSize.setModel(fontSizeModel);
        
        GraphicsEnvironment e = GraphicsEnvironment.getLocalGraphicsEnvironment();
        Font[] fonts = e.getAllFonts(); // Get the fonts
//        for (Font f : fonts) {
//          dlm.addElement(f.getFontName());
//        }
        //for(int i = 80; i < fonts.length; i ++)
        //{
        //    fontModel.addElement(fonts[i].getFontName());
        //}
        fontModel.addElement("Arial");
        cboFont.setModel(fontModel);
        cboFont.setSelectedItem("Arial");
        
        
        this.setTitle(friend);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPaneContent = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTptxtInput = new javax.swing.JTextPane();
        btnSend = new javax.swing.JButton();
        cboFont = new javax.swing.JComboBox<>();
        cboSize = new javax.swing.JComboBox<>();
        jtbtnBold = new javax.swing.JToggleButton();
        jtbtnItalic = new javax.swing.JToggleButton();
        jtbtnUnderline = new javax.swing.JToggleButton();
        btnFontColor = new javax.swing.JButton();
        btnEmotion = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTextPaneContent.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        jScrollPane1.setViewportView(jTextPaneContent);

        jTptxtInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTptxtInputKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(jTptxtInput);

        btnSend.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnSend, org.openide.util.NbBundle.getMessage(FormChatPrivacy.class, "FormChatPrivacy.btnSend.text")); // NOI18N
        btnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendActionPerformed(evt);
            }
        });

        cboFont.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        cboFont.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboFont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboFontActionPerformed(evt);
            }
        });

        cboSize.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        cboSize.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboSizeActionPerformed(evt);
            }
        });

        jtbtnBold.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jtbtnBold, org.openide.util.NbBundle.getMessage(FormChatPrivacy.class, "FormChatPrivacy.jtbtnBold.text")); // NOI18N
        jtbtnBold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtbtnBoldActionPerformed(evt);
            }
        });

        jtbtnItalic.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jtbtnItalic, org.openide.util.NbBundle.getMessage(FormChatPrivacy.class, "FormChatPrivacy.jtbtnItalic.text")); // NOI18N
        jtbtnItalic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtbtnItalicActionPerformed(evt);
            }
        });

        jtbtnUnderline.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jtbtnUnderline, org.openide.util.NbBundle.getMessage(FormChatPrivacy.class, "FormChatPrivacy.jtbtnUnderline.text")); // NOI18N
        jtbtnUnderline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtbtnUnderlineActionPerformed(evt);
            }
        });

        btnFontColor.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnFontColor, org.openide.util.NbBundle.getMessage(FormChatPrivacy.class, "FormChatPrivacy.btnFontColor.text")); // NOI18N
        btnFontColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFontColorActionPerformed(evt);
            }
        });

        btnEmotion.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnEmotion, org.openide.util.NbBundle.getMessage(FormChatPrivacy.class, "FormChatPrivacy.btnEmotion.text")); // NOI18N
        btnEmotion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEmotionActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(FormChatPrivacy.class, "FormChatPrivacy.jLabel1.text")); // NOI18N
        jLabel1.setMinimumSize(new java.awt.Dimension(130, 130));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cboFont, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cboSize, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtbtnBold, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtbtnItalic)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtbtnUnderline)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnFontColor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnEmotion)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSend, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 294, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cboSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cboFont, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jtbtnBold)
                        .addComponent(jtbtnItalic)
                        .addComponent(jtbtnUnderline)
                        .addComponent(btnEmotion)
                        .addComponent(btnFontColor)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                    .addComponent(btnSend, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cboFontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboFontActionPerformed
        // TODO add your handling code here:
        updatefont();
    }//GEN-LAST:event_cboFontActionPerformed

    private void cboSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboSizeActionPerformed
        // TODO add your handling code here:
        updatefont();
    }//GEN-LAST:event_cboSizeActionPerformed

    private void jtbtnBoldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtbtnBoldActionPerformed
        // TODO add your handling code here:
        updatefont();
    }//GEN-LAST:event_jtbtnBoldActionPerformed

    private void jtbtnItalicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtbtnItalicActionPerformed
        // TODO add your handling code here:
        updatefont();
    }//GEN-LAST:event_jtbtnItalicActionPerformed

    private void jtbtnUnderlineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtbtnUnderlineActionPerformed
        // TODO add your handling code here:

        updatefont();
    }//GEN-LAST:event_jtbtnUnderlineActionPerformed

    private void btnFontColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFontColorActionPerformed
        // TODO add your handling code here:
        fontColor = JColorChooser.showDialog(this, "Choose Font Color", Color.BLACK);
        updatefont();
    }//GEN-LAST:event_btnFontColorActionPerformed

    private void btnEmotionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEmotionActionPerformed
        // TODO add your handling code here:

        SmileyChooser sc = new SmileyChooser(parent, true);
        sc.setframe(parent);
        sc.setChatWindow(this);
        sc.setTitle("Choose Smiley");
        sc.setLocationRelativeTo(this);
        sc.setVisible(true);
    }//GEN-LAST:event_btnEmotionActionPerformed

    private void jTptxtInputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTptxtInputKeyReleased
        // TODO add your handling code here:
        
        jTptxtInput.getCaret().setVisible(true);
        if(
                (      
                       evt.getKeyCode() ==KeyEvent.VK_SHIFT
                    || evt.getKeyCode() ==KeyEvent.VK_CONTROL
                    || evt.getKeyCode() ==KeyEvent.VK_TAB
                    || evt.getKeyCode() ==KeyEvent.VK_CAPS_LOCK
                    || evt.getKeyCode() ==KeyEvent.VK_ALT
                    || evt.getKeyCode() ==KeyEvent.VK_INSERT
                    || evt.getKeyCode() ==KeyEvent.VK_HOME
                    || evt.getKeyCode() ==KeyEvent.VK_PAGE_UP
                    || evt.getKeyCode() ==KeyEvent.VK_PAGE_DOWN
                    || evt.getKeyCode() ==KeyEvent.VK_DELETE
                    || evt.getKeyCode() ==KeyEvent.VK_END
                    || evt.getKeyCode() ==KeyEvent.VK_NUM_LOCK
                    || evt.getKeyCode() ==KeyEvent.VK_UP
                    || evt.getKeyCode() ==KeyEvent.VK_DOWN
                    || evt.getKeyCode() ==KeyEvent.VK_ESCAPE
                    || evt.getKeyCode() ==KeyEvent.VK_F1
                    || evt.getKeyCode() ==KeyEvent.VK_F2
                    || evt.getKeyCode() ==KeyEvent.VK_F3
                    || evt.getKeyCode() ==KeyEvent.VK_F4
                    || evt.getKeyCode() ==KeyEvent.VK_F5
                    || evt.getKeyCode() ==KeyEvent.VK_F6
                    || evt.getKeyCode() ==KeyEvent.VK_F7
                    || evt.getKeyCode() ==KeyEvent.VK_F8
                    || evt.getKeyCode() ==KeyEvent.VK_F9
                    || evt.getKeyCode() ==KeyEvent.VK_F10
                    || evt.getKeyCode() ==KeyEvent.VK_F11
                    || evt.getKeyCode() ==KeyEvent.VK_F12
                    || evt.getKeyCode() ==KeyEvent.VK_PRINTSCREEN
                    || evt.getKeyCode() ==KeyEvent.VK_SCROLL_LOCK
                    || evt.getKeyCode() ==KeyEvent.VK_PAUSE
                    || evt.getKeyCode() ==KeyEvent.VK_WINDOWS
                ) && !evt.isControlDown())
        {
            
            
        }
        else if(evt.getKeyCode() ==KeyEvent.VK_LEFT && !evt.isControlDown())
        {
            //int pos = jTptxtInput.getCaretPosition();
            //jTptxtInput.setCaretPosition(pos - 1);
            

        }
        else if(evt.getKeyCode() ==KeyEvent.VK_RIGHT && !evt.isControlDown())
        {
            //int pos = jTptxtInput.getCaretPosition();
            //jTptxtInput.setCaretPosition(pos + 1);
        }
        
        else if(evt.getKeyCode()==KeyEvent.VK_BACK_SPACE && !evt.isControlDown())
        {
            rootMsg = rootMsg.substring(0, rootMsg.length()-1);
        }
        else if(evt.getKeyCode()==KeyEvent.VK_ENTER && !evt.isControlDown())
        {
            send(rootMsg);
            rootMsg = "";
        }
        else
        {
            rootMsg += evt.getKeyChar();
            //rootMsg = rootMsg.substring(0, jTptxtInput.getCaretPosition()) 
            //        + evt.getKeyChar() + rootMsg.substring(jTptxtInput.getCaretPosition());
        }
        System.out.println(rootMsg);
        String tmp = jTptxtInput.getText();
        if (tmp.indexOf("<s>") > -1 && tmp.indexOf("</s>") > -1) 
        {
                      
            try {
                String imgName = tmp.substring(tmp.indexOf("<s>") + 3, tmp.indexOf("</s>"));

                ImageIcon emo = new ImageIcon(new javax.swing.ImageIcon(getClass().getResource("/image/" + imgName + ".gif")).getImage());
                jTptxtInput.setCaretPosition(jTptxtInput.getStyledDocument().getLength());
                int start = tmp.indexOf("<s>");
                int end = tmp.indexOf("</s>");
                jTptxtInput.setSelectionStart(start);
                jTptxtInput.setSelectionEnd(end + 4);
                jTptxtInput.replaceSelection("");
                jTptxtInput.insertIcon(emo);
                //tmp = tmp.substring(tmp.indexOf("</s>") + 4);
            } catch (Exception e) {
           //     jTextPaneContent.getStyledDocument().insertString(jTextPaneContent.getStyledDocument().getLength(), tmp.substring(0, tmp.indexOf("</s>") + 4), sas);
                tmp = tmp.substring(tmp.indexOf("</s>") + 5);
            }
        }
    }//GEN-LAST:event_jTptxtInputKeyReleased

    private void btnSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendActionPerformed
        // TODO add your handling code here:
        send(rootMsg);
    }//GEN-LAST:event_btnSendActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(FormChatPrivacy.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(FormChatPrivacy.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(FormChatPrivacy.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(FormChatPrivacy.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new FormChatPrivacy().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEmotion;
    private javax.swing.JButton btnFontColor;
    private javax.swing.JButton btnSend;
    private javax.swing.JComboBox<String> cboFont;
    private javax.swing.JComboBox<String> cboSize;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextPane jTextPaneContent;
    public javax.swing.JTextPane jTptxtInput;
    private javax.swing.JToggleButton jtbtnBold;
    private javax.swing.JToggleButton jtbtnItalic;
    private javax.swing.JToggleButton jtbtnUnderline;
    // End of variables declaration//GEN-END:variables
   
    
    private void send(String newChat) {
        // Lấy text từ ô input
        //String newChat = this.jTptxtInput.getText();
        
        // Input có chữ mới gửi
        if (!newChat.equals("")) {
            // Clear ô input
            //this.jTptxtInput.setText("");
/*
            // Tạo json
            MyMessage msg = new MyMessage(this.user, this.friend, null, newChat);
            String json = this.gson.toJson(msg);

            // Các form chat xài chung printWriter của FormMainClient để đẩy json đi
            this.printWriter.println(json);
            this.printWriter.flush();
     */       
            // update bảng history
           // updateTxtContent(this.user + ": " + newChat);
           updateTxtContentSend( newChat);
        }
    }
    public void updateTxtContentSend(String newChat) {

//    StyledDocument doc = (StyledDocument) jTptxtInput.getDocument();
//    Element element = doc.getCharacterElement(0);
//    AttributeSet as = element.getAttributes();
//    //apply a new style based on previous 
//    MutableAttributeSet asNew = new SimpleAttributeSet(as.copyAttributes());
//    //StyleConstants.setBold(asNew, !StyleConstants.isBold(as));
//    //doc.setCharacterAttributes(0, jTptxtInput.getSelectedText().length(), asNew, true);
//    //String text = (StyleConstants.isBold(as) ? "Cancel Bold" : "Bold");

//        
//    appendToPane(jTextPaneContent, " " + this.user + ": ", Color.red, StyleConstants.ALIGN_LEFT, false, false);
//    appendToPane(jTextPaneContent, newChat + "\n", Color.BLACK, StyleConstants.ALIGN_LEFT, isBold, isItalic);
//       // jTextPaneContent.setText(newChat);

        if(newChat.length()<1)
            return;
            //String tmp=txtInput.getText();
            //txtInput.setText("");
            SimpleAttributeSet sas=new SimpleAttributeSet();
            StyleConstants.setFontSize(sas, Integer.parseInt(cboSize.getSelectedItem().toString()));
            StyleConstants.setForeground(sas,fontColor);
            StyleConstants.setBold(sas, jtbtnBold.isSelected());
            StyleConstants.setUnderline(sas, jtbtnUnderline.isSelected());
            StyleConstants.setItalic(sas, jtbtnItalic.isSelected());
            StyleConstants.setFontFamily(sas, cboFont.getSelectedItem().toString());
            StyleConstants.setAlignment(sas, StyleConstants.ALIGN_RIGHT);
            Object sas1 = sas.toString();
            Content ct = new Content(newChat, sas1);
            // Tạo json
            Request msg = new Request(3,this.user, null,this.friend, null, ct);
            Object json = this.gson.toJson(msg);
        try {
            // Các form chat xài chung printWriter của FormMainClient để đẩy json đi
            this.printWriter.println(json);
            this.printWriter.flush();
        } catch (Exception ex) {
           ex.printStackTrace();
        }
            
            displayTextSend(this.user, sas, newChat);
            jTptxtInput.setText("");

    }

    private void displayTextSend(String user, SimpleAttributeSet sas, String tmp) {
        StyledDocument doc = jTextPaneContent.getStyledDocument();
        SimpleAttributeSet buffer = new SimpleAttributeSet();
        StyleConstants.setBold(buffer, true);
        StyleConstants.setFontSize(buffer, 12);
        StyleConstants.setForeground(buffer, Color.red);
        StyleConstants.setAlignment(buffer, StyleConstants.ALIGN_LEFT);
        
        try {
            jTextPaneContent.getStyledDocument().insertString(doc.getLength(), "\n" + user + ": " , buffer);
           while (tmp.indexOf("<s>") > -1 && tmp.indexOf("</s>") > -1) {

                jTextPaneContent.getStyledDocument().insertString(jTextPaneContent.getStyledDocument().getLength(), tmp.substring(0, tmp.indexOf("<s>")), sas);
                tmp = tmp.substring(tmp.indexOf("<s>"));
                try {
                    String imgName = tmp.substring(3, tmp.indexOf("</s>"));

                    ImageIcon jl = new ImageIcon(new javax.swing.ImageIcon(getClass().getResource("/image/" + imgName + ".gif")).getImage());
                    jTextPaneContent.setCaretPosition(jTextPaneContent.getStyledDocument().getLength());
                    jTextPaneContent.insertIcon(jl);
                    tmp = tmp.substring(tmp.indexOf("</s>") + 4);
                } catch (Exception e) {
                    jTextPaneContent.getStyledDocument().insertString(jTextPaneContent.getStyledDocument().getLength(), tmp.substring(0, tmp.indexOf("</s>") + 4), sas);
                    tmp = tmp.substring(tmp.indexOf("</s>") + 5);
                }
            }
           StyleConstants.setAlignment(sas, StyleConstants.ALIGN_LEFT);
            //doc.setCharacterAttributes(0,doc.getLength(),sas,false);
            //jTextPaneContent.getStyledDocument().insertString(doc.getLength(), tmp, sas);
            int len = jTextPaneContent.getDocument().getLength();
            jTextPaneContent.setCaretPosition(len);
            jTextPaneContent.setCharacterAttributes(sas, false);
            jTextPaneContent.setParagraphAttributes(sas, true);
            jTextPaneContent.replaceSelection(tmp);
            
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        

    }
    private void displayTextReceive(String user, SimpleAttributeSet sas, String tmp) {
        StyledDocument doc = jTextPaneContent.getStyledDocument();
        SimpleAttributeSet buffer = new SimpleAttributeSet();
        StyleConstants.setBold(buffer, true);
        StyleConstants.setFontSize(buffer, 12);
        StyleConstants.setForeground(buffer, Color.BLUE);
        StyleConstants.setAlignment(buffer, StyleConstants.ALIGN_RIGHT);
        try {
            jTextPaneContent.getStyledDocument().insertString(doc.getLength(), "\n" + user + ": " , buffer);
           while (tmp.indexOf("<s>") > -1 && tmp.indexOf("</s>") > -1) {

                jTextPaneContent.getStyledDocument().insertString(jTextPaneContent.getStyledDocument().getLength(), tmp.substring(0, tmp.indexOf("<s>")), sas);
                tmp = tmp.substring(tmp.indexOf("<s>"));
                try {
                    String imgName = tmp.substring(3, tmp.indexOf("</s>"));

                    ImageIcon jl = new ImageIcon(new javax.swing.ImageIcon(getClass().getResource("/image/" + imgName + ".gif")).getImage());
                    jTextPaneContent.setCaretPosition(jTextPaneContent.getStyledDocument().getLength());
                    jTextPaneContent.insertIcon(jl);
                    tmp = tmp.substring(tmp.indexOf("</s>") + 4);
                } catch (Exception e) {
                    jTextPaneContent.getStyledDocument().insertString(jTextPaneContent.getStyledDocument().getLength(), tmp.substring(0, tmp.indexOf("</s>") + 4), sas);
                    tmp = tmp.substring(tmp.indexOf("</s>") + 5);
                }
            }
           StyleConstants.setAlignment(sas, StyleConstants.ALIGN_RIGHT);
            //jTextPaneContent.getStyledDocument().insertString(doc.getLength(), tmp, sas);
            int len = jTextPaneContent.getDocument().getLength();
            jTextPaneContent.setCaretPosition(len);
            jTextPaneContent.setCharacterAttributes(sas, false);
            jTextPaneContent.setParagraphAttributes(sas, true);
            jTextPaneContent.replaceSelection(tmp);
           
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        

    }

    
    public void updateTxtContentReceive(Request msg) {

        //appendToPane(jTextPaneContent, msg.getUserSend() + ": ", Color.BLUE, StyleConstants.ALIGN_RIGHT, false, false);
        //appendToPane(jTextPaneContent, msg.getContent() + " " +"\n", Color.BLACK, StyleConstants.ALIGN_RIGHT, false, false);
        //size=14 foreground=java.awt.Color[r=0,g=0,b=0] bold=true underline=false italic=false family=Arial 
        String tmp = msg.getContent().getSas().toString();

        String seg[] = tmp.split(" ");
        String fontSize = seg[0].substring(seg[0].lastIndexOf("=") +1);
        String foreground = seg[1].substring(seg[1].indexOf("=") +1);
        String foregroundElement = foreground.substring(foreground.indexOf("[")+ 1, foreground.indexOf("]"));
        
        int red = Integer.parseInt(foregroundElement.substring(foregroundElement.indexOf("=") +1, foregroundElement.indexOf(",")));
        int green = Integer.parseInt(foregroundElement.substring(foregroundElement.indexOf("g") +2, foregroundElement.indexOf("b") -1));
        int blue = Integer.parseInt(foregroundElement.substring(foregroundElement.indexOf("b") + 2));

        String bold = seg[2].substring(seg[2].indexOf("=") +1);
        String underline = seg[3].substring(seg[3].indexOf("=") +1);
        String italic = seg[4].substring(seg[4].indexOf("=") +1);

        String fontFamily = seg[5].substring(seg[5].indexOf("=") +1);
        SimpleAttributeSet sas= new SimpleAttributeSet();
        StyleConstants.setFontSize(sas, Integer.parseInt(fontSize));
        StyleConstants.setForeground(sas,new Color(red, green, blue));
        StyleConstants.setBold(sas, (bold.contains("true")) ? true : false);
        StyleConstants.setUnderline(sas, (underline.contains("true")) ? true : false);
        StyleConstants.setItalic(sas, (italic.contains("true")) ? true : false);
        StyleConstants.setFontFamily(sas, fontFamily);
        
        displayTextReceive(msg.getToUser(), sas, msg.getContent().getContent());
    }
    
    private void appendToPane(JTextPane tp, String msg, Color c, int align, boolean isBold, boolean isItalic)
    {
        StyleContext sc = StyleContext.getDefaultStyleContext();
        AttributeSet aset = sc.addAttribute(SimpleAttributeSet.EMPTY, StyleConstants.Foreground, c);

        aset = sc.addAttribute(aset, StyleConstants.FontFamily, "Lucida Console");
        aset = sc.addAttribute(aset, StyleConstants.Alignment, align);
        aset = sc.addAttribute(aset, StyleConstants.CharacterConstants.Bold, isBold);
        aset = sc.addAttribute(aset, StyleConstants.CharacterConstants.Italic, isItalic);

        int len = tp.getDocument().getLength();
        tp.setCaretPosition(len);
        tp.setCharacterAttributes(aset, false);
        tp.setParagraphAttributes(aset, true);
        tp.replaceSelection(msg);
        StyledDocument doc = jTptxtInput.getStyledDocument();
        
    }
    
    
    public void run() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    private void updatefont() {
        StyledDocument doc = jTptxtInput.getStyledDocument();
        SimpleAttributeSet sas = new SimpleAttributeSet();
        StyleConstants.setFontSize(sas, Integer.parseInt(cboSize.getSelectedItem().toString()));
        StyleConstants.setForeground(sas,fontColor);
        StyleConstants.setBold(sas, jtbtnBold.isSelected());
        StyleConstants.setUnderline(sas, jtbtnUnderline.isSelected());
        StyleConstants.setItalic(sas, jtbtnItalic.isSelected());
        StyleConstants.setFontFamily(sas, cboFont.getSelectedItem().toString());
        doc.setCharacterAttributes(0, doc.getLength(), sas, true);
    }
}

